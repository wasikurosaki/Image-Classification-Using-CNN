# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13eY1gvnQ8dNhupqYFYUyo-TqBs9fG_F_
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import confusion_matrix , classification_report
import numpy as np

(X_train,Y_train), (X_test,Y_test) = datasets.cifar10.load_data()
print(" Train Shape of the Data ",X_train.shape)
print(" Test Shape of the Data ",X_test.shape)

X_train[0]

Y_train[:5]

Y_train = Y_train.reshape(-1,)

Y_train[:5]

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

def plot_sample(x,y,index):
    plt.figure(figsize=(15,2))
    plt.imshow(x[index])
    plt.xlabel(classes[y[index]])

plot_sample(X_train,Y_train,0)

X_train = X_train/255
X_test = X_test/255

ann = models.Sequential([
        layers.Flatten(input_shape=(32,32,3)),
        layers.Dense(3000, activation='relu'),
        layers.Dense(1000, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])

ann.compile(optimizer='SGD',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

ann.fit(X_train, Y_train, epochs=5)



y_pred = ann.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(Y_test, y_pred_classes))

cnn = models.Sequential([
        #cnn


        layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
        layers.MaxPooling2D(2,2),

        layers.Conv2D(filters = 32, kernel_size = (3,3), activation="relu",input_shape=(32,32,3)),
        layers.MaxPooling2D(2,2),


        #dense
        layers.Flatten(input_shape=(32,32,3)),
        layers.Dense(64, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])

cnn.compile(
    optimizer = "adam",
    loss = "sparse_categorical_crossentropy",
    metrics = ["accuracy"]
)

cnn.fit(X_train,Y_train,epochs=5)

cnn.evaluate(X_test,Y_test)

y_pred = cnn.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(Y_test, y_pred_classes))